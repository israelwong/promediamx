generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Usuario {
  id        String    @id @default(cuid())
  username  String    @unique
  email     String    @unique
  telefono  String    @unique @default("")
  direccion String    @default("")
  clabe     String    @default("")
  password  String
  rol       String
  status    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sesiones  Sesion[]
  Cliente   Cliente[]
}

model Sesion {
  id        String   @id @default(cuid())
  usuarioId String
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  token     String
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cliente {
  id        String    @id @default(cuid())
  usuarioId String
  usuario   Usuario   @relation(fields: [usuarioId], references: [id])
  nombre    String
  email     String
  telefono  String
  direccion String
  status    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Negocio   Negocio[]
}

model Negocio {
  id                 String            @id @default(cuid())
  clienteId          String
  cliente            Cliente           @relation(fields: [clienteId], references: [id])
  nombre             String
  slogan             String?
  descripcion        String?
  telefono           String
  email              String
  rfc                String?
  razon              String?
  direccion          String?
  url_web            String?
  url_google_maps    String?
  iframe_google_maps String?
  url_logo           String?
  url_facebook       String?
  url_instagram      String?
  url_x              String?
  url_linkedin       String?
  url_tiktok         String?
  status             String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  stripeCustomerId   String?
  facturacion        Facturacion[]
  pagos              Pago[]
  servicios          NegocioServicio[]
  contrato           Contrato[]
  contactos          Contactos[]
  oportunidades      Oportunidades[]
  actividades        Actividad[]
}

model Facturacion {
  id                     String    @id @default(cuid())
  negocioId              String
  negocio                Negocio   @relation(fields: [negocioId], references: [id])
  metodo_pago            String
  fecha_pago             DateTime
  recurrencia            String
  monto                  Float
  comision_fintech       Float
  clave_autorizacion     String
  deposito_fintech       Float?
  fecha_deposito_fintech DateTime?
  status                 String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}

model Pago {
  id              Int      @id @default(autoincrement())
  negocioId       String
  negocio         Negocio  @relation(fields: [negocioId], references: [id])
  stripePaymentId String? // ID del pago en Stripe
  tipoPago        String // Ejemplo: "PAGO_UNICO" o "SUSCRIPCION"
  cantidad        Float // Monto del pago
  status          String // Estado del pago (Ejemplo: "completado", "pendiente")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Contrato {
  id            String          @id @default(cuid())
  negocioId     String
  negocio       Negocio         @relation(fields: [negocioId], references: [id])
  fechaInicio   DateTime
  fechaFin      DateTime
  status        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  anexoContrato AnexoContrato[]
}

model AnexoContrato {
  id              String            @id @default(cuid())
  contratoId      String
  contrato        Contrato          @relation(fields: [contratoId], references: [id])
  url             String
  status          String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  negocioServicio NegocioServicio[]
}

model Servicio {
  id              String            @id @default(cuid())
  nombre          String
  descripcion     String?
  precio          Float?
  cuota_mensual   Float?
  cuota_anual     Float?
  status          String
  order           Int?              @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  negocioServicio NegocioServicio[]
}

model NegocioServicio {
  id              String          @id @default(cuid())
  negocioId       String
  negocio         Negocio         @relation(fields: [negocioId], references: [id])
  servicioId      String
  servicio        Servicio        @relation(fields: [servicioId], references: [id])
  anexoContratoId String
  AnexoContrato   AnexoContrato[]
  fechaInicio     DateTime
  fechaFin        DateTime?
  cuota_mensual   Float?
  cuota_anual     Float?
  pago_unico      Float?
  status          String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

//LANDING PAGE
model Landing {
  id        String      @id @default(cuid())
  negocioId String
  nombre    String      @unique
  url       String      @unique
  status    String      @default("inactive")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Analitica Analitica[]
  Seccion   Seccion[]
}

model Analitica {
  id        String   @id @default(cuid())
  landingId String
  landing   Landing  @relation(fields: [landingId], references: [id])
  accion    String
  fecha     DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Seccion {
  id        String      @id @default(cuid())
  landingId String
  landing   Landing     @relation(fields: [landingId], references: [id])
  nombre    String
  status    String      @default("active")
  position  Int         @unique @map("position")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Component Component[]
}

model Component {
  id              String            @id @default(cuid())
  seccionId       String
  seccion         Seccion           @relation(fields: [seccionId], references: [id])
  nombre          String
  position        Int               @unique @map("position")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ComponentConfig ComponentConfig[]
}

model ComponentConfig {
  id           String    @id @default(cuid())
  componentId  String
  component    Component @relation(fields: [componentId], references: [id])
  config_key   String
  config_value String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

//CRM
model Contactos {
  id            Int             @id @default(autoincrement())
  negocioId     String
  negocio       Negocio         @relation(fields: [negocioId], references: [id])
  nombre        String
  telefono      String?
  email         String          @unique
  leadType      String // Tipificación del lead
  oportunidades Oportunidades[]
  createdAt     DateTime        @default(now())
}

model LeadType {
  id        String   @id @default(cuid())
  nombre    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Oportunidades {
  id          Int         @id @default(autoincrement())
  negocioId   String
  negocio     Negocio     @relation(fields: [negocioId], references: [id])
  contactId   Int?
  contactos   Contactos?  @relation(fields: [contactId], references: [id])
  titulo      String
  status      String
  cantidad    Float
  closeDate   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  actividades Actividad[] // Relación con actividades de seguimiento
}

model OpportunityStatus {
  id        String   @id @default(cuid())
  nombre    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Actividad {
  id            Int           @id @default(autoincrement())
  opportunityId Int
  oportunidades Oportunidades @relation(fields: [opportunityId], references: [id])
  type          String // Tipo de actividad, ej., llamada o reunión
  description   String?
  negocioId     String
  negocio       Negocio       @relation(fields: [negocioId], references: [id])
  date          DateTime      @default(now())
}

model ActivityType {
  id        String   @id @default(cuid())
  nombre    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
