generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id        String   @id @default(cuid())
  status    String   @default("activo")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String   @unique
  email     String   @unique
  telefono  String   @unique @default("")
  password  String
  rolId     String?
  sesiones  Sesion[]
  rol       Rol?     @relation(fields: [rolId], references: [id])
}

model Rol {
  id          String    @id @default(cuid())
  nombre      String    @unique
  descripcion String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  usuarios    Usuario[]
}

model Sesion {
  id        String   @id @default(cuid())
  usuarioId String
  token     String
  status    String   @default("activo")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

model Cliente {
  id               String         @id @default(cuid())
  nombre           String?
  email            String         @unique
  telefono         String
  password         String
  rfc              String?
  curp             String?
  razonSocial      String?
  status           String         @default("activo")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  stripeCustomerId String?        @unique
  contrato         Contrato[]
  Factura          Factura[]
  negocio          Negocio[]
  Notificacion     Notificacion[]
}

model Contrato {
  id           String   @id @default(cuid())
  clienteId    String
  cotizacionId String
  fechaInicio  DateTime
  fechaFin     DateTime
  status       String   @default("activo")
  suscripcion  Boolean  @default(true)
  recurrencia  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  cliente      Cliente  @relation(fields: [clienteId], references: [id])
}

model AsistenteVirtual {
  id                        String                      @id @default(cuid())
  urlImagen                 String?
  nombre                    String
  origen                    String?
  whatsappBusiness          String?
  phoneNumberId             String?                     @unique
  token                     String?
  version                   Float
  status                    String                      @default("activo")
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  descripcion               String?
  clienteId                 String?
  negocioId                 String?                     @unique
  canalConversacionalId     String?
  whatsappBusinessAccountId String?
  whatsappConnectionStatus  String?
  whatsappDisplayName       String?
  whatsappQualityRating     String?
  whatsappTokenLastSet      DateTime?
  umbralSimilitud       Float?    @default(0.72) // Umbral de confianza para la búsqueda semántica
  conocimientoActivado   Boolean @default(true)


  Agenda                    Agenda[]
  AsistenteTareaSuscripcion AsistenteTareaSuscripcion[]
  canalConversacional       CanalConversacional?        @relation(fields: [canalConversacionalId], references: [id])
  negocio                   Negocio?                    @relation(fields: [negocioId], references: [id], onDelete: Cascade)
  Conversacion              Conversacion[]
  FacturaItem               FacturaItem[]
  ItemInteraccion           ItemInteraccion[]
  TareaEjecutada            TareaEjecutada[]
}

model CanalConversacional {
  id               String             @id @default(cuid())
  nombre           String             @unique
  icono            String?
  descripcion      String?
  status           String             @default("activo")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  orden            Int?
  AsistenteVirtual AsistenteVirtual[]
  tareasSoportadas TareaCanal[]
}

model AsistenteTareaSuscripcion {
  id                 String           @id @default(cuid())
  asistenteVirtualId String
  tareaId            String
  fechaSuscripcion   DateTime         @default(now())
  fechaDesuscripcion DateTime?
  status             String           @default("activo")
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  montoSuscripcion   Float?
  asistenteVirtual   AsistenteVirtual @relation(fields: [asistenteVirtualId], references: [id], onDelete: Cascade)
  tarea              Tarea            @relation(fields: [tareaId], references: [id])
  FacturaItem        FacturaItem[]

  @@unique([asistenteVirtualId, tareaId])
  @@index([asistenteVirtualId])
}

model Tarea {
  id                             String                      @id @default(cuid())
  orden                          Int?
  nombre                         String                      @unique
  instruccion                    String?
  precio                         Float?
  rol                            String?
  personalidad                   String?
  version                        Float?
  status                         String                      @default("activo")
  createdAt                      DateTime                    @default(now())
  updatedAt                      DateTime                    @updatedAt
  categoriaTareaId               String?
  iconoUrl                       String?
  esTareaPorDefecto              Boolean                     @default(false)
  descripcionMarketplace         String?
  AsistenteTareaSuscripcion      AsistenteTareaSuscripcion[]
  CategoriaTarea                 CategoriaTarea?             @relation(fields: [categoriaTareaId], references: [id])
  camposPersonalizadosRequeridos TareaCampoPersonalizado[]
  canalesSoportados              TareaCanal[]
  TareaEjecutada                 TareaEjecutada[]
  etiquetas                      TareaEtiqueta[]
  tareaFuncion                   TareaFuncion?
  TareaGaleria                   TareaGaleria[]
}

model TareaFuncion {
  id          String                  @id @default(cuid())
  descripcion String?
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  nombre      String?
  tareaId     String?                 @unique
  tarea       Tarea?                  @relation(fields: [tareaId], references: [id], onDelete: Cascade)
  parametros  TareaFuncionParametro[]
}

model TareaFuncionParametro {
  id                String       @id @default(cuid())
  tareaFuncionId    String
  descripcionParaIA String
  tipoDato          String
  esObligatorio     Boolean      @default(true)
  orden             Int?
  valorPorDefecto   String?
  ejemploValor      String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  nombre            String
  tareaFuncion      TareaFuncion @relation(fields: [tareaFuncionId], references: [id], onDelete: Cascade)

  @@unique([tareaFuncionId, nombre])
  @@index([tareaFuncionId])
}

model TareaCanal {
  tareaId               String
  canalConversacionalId String
  canalConversacional   CanalConversacional @relation(fields: [canalConversacionalId], references: [id], onDelete: Cascade)
  tarea                 Tarea               @relation(fields: [tareaId], references: [id], onDelete: Cascade)

  @@id([tareaId, canalConversacionalId])
  @@index([tareaId])
  @@index([canalConversacionalId])
}

model TareaEtiqueta {
  tareaId         String
  etiquetaTareaId String
  asignadoEn      DateTime      @default(now())
  etiquetaTarea   EtiquetaTarea @relation(fields: [etiquetaTareaId], references: [id], onDelete: Cascade)
  tarea           Tarea         @relation(fields: [tareaId], references: [id], onDelete: Cascade)

  @@id([tareaId, etiquetaTareaId])
  @@index([tareaId])
  @@index([etiquetaTareaId])
}

model CategoriaTarea {
  id          String   @id @default(cuid())
  orden       Int?
  nombre      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  descripcion String?
  color       String?
  Tarea       Tarea[]
}

model EtiquetaTarea {
  id          String          @id @default(cuid())
  nombre      String          @unique
  descripcion String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  orden       Int?
  tareas      TareaEtiqueta[]
}

model TareaCampoPersonalizado {
  tareaId                 String
  crmCampoPersonalizadoId String
  esRequerido             Boolean               @default(true)
  crmCampoPersonalizado   CRMCampoPersonalizado @relation(fields: [crmCampoPersonalizadoId], references: [id])
  tarea                   Tarea                 @relation(fields: [tareaId], references: [id], onDelete: Cascade)

  @@id([tareaId, crmCampoPersonalizadoId])
  @@index([crmCampoPersonalizadoId])
}

model TareaEjecutada {
  id                 String           @id @default(cuid())
  asistenteVirtualId String
  tareaId            String
  fechaEjecutada     DateTime
  metadata           String?
  createdAt          DateTime         @default(now())
  asistenteVirtual   AsistenteVirtual @relation(fields: [asistenteVirtualId], references: [id])
  tarea              Tarea            @relation(fields: [tareaId], references: [id])
}

model TareaGaleria {
  id           String   @id @default(cuid())
  tareaId      String
  imageUrl     String
  altText      String?
  descripcion  String?
  orden        Int?
  tamañoBytes Int?
  createdAt    DateTime @default(now())
  tarea        Tarea    @relation(fields: [tareaId], references: [id], onDelete: Cascade)

  @@index([tareaId])
}

model ParametroRequerido {
  id            String                           @id @default(cuid())
  orden         Int?
  tipoDato      String
  descripcion   String?
  createdAt     DateTime                         @default(now())
  updatedAt     DateTime                         @updatedAt
  nombreInterno String?                          @unique
  nombreVisible String?
  funciones     TareaFuncionParametroRequerido[]
}

model TareaFuncionParametroRequerido {
  tareaFuncionId       String
  parametroRequeridoId String
  esObligatorio        Boolean            @default(true)
  parametroRequerido   ParametroRequerido @relation(fields: [parametroRequeridoId], references: [id], onDelete: Cascade)

  @@id([tareaFuncionId, parametroRequeridoId])
  @@index([parametroRequeridoId])
}

model Factura {
  id                    String        @id @default(cuid())
  clienteId             String
  fechaEmision          DateTime      @default(now())
  fechaVencimiento      DateTime
  periodoInicio         DateTime
  periodoFin            DateTime
  montoTotal            Float
  status                String        @default("pendiente")
  stripeInvoiceId       String?       @unique
  stripePaymentIntentId String?       @unique
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  cliente               Cliente       @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  items                 FacturaItem[]

  @@index([clienteId])
  @@index([status])
  @@index([fechaVencimiento])
}

model FacturaItem {
  id                          String                     @id @default(cuid())
  facturaId                   String
  descripcion                 String
  monto                       Float
  cantidad                    Int                        @default(1)
  periodoInicio               DateTime?
  periodoFin                  DateTime?
  asistenteVirtualId          String?
  asistenteTareaSuscripcionId String?
  asistenteTareaSuscripcion   AsistenteTareaSuscripcion? @relation(fields: [asistenteTareaSuscripcionId], references: [id])
  asistenteVirtual            AsistenteVirtual?          @relation(fields: [asistenteVirtualId], references: [id])
  factura                     Factura                    @relation(fields: [facturaId], references: [id], onDelete: Cascade)

  @@index([facturaId])
  @@index([asistenteVirtualId])
  @@index([asistenteTareaSuscripcionId])
}

model Negocio {
  id                           String                        @id @default(cuid())
  clienteId                    String?
  logo                         String?
  nombre                       String
  telefonoLlamadas             String?
  telefonoWhatsapp             String?
  email                        String?
  direccion                    String?
  googleMaps                   String?
  paginaWeb                    String?
  status                       String                        @default("activo")
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  almacenamientoUsadoBytes     BigInt?                       @default(0)
  slogan                       String?
  logoTamañoBytes             Int?
  slug                         String?                       @unique
  mensajeBienvenida            String?
  agenda                       Agenda[]
  AgendaConfiguracion          AgendaConfiguracion?
  agendaTipoCita               AgendaTipoCita[]
  AsistenteVirtual             AsistenteVirtual?
  CRM                          CRM?
  Catalogo                     Catalogo[]
  excepcionesHorario           ExcepcionHorario[]
  GaleriaNegocio               GaleriaNegocio[]
  horariosAtencion             HorarioAtencion[]
  itemsCatalogo                ItemCatalogo[]
  cliente                      Cliente?                      @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  categorias                   NegocioCategoria[]
  configuracionPago            NegocioConfiguracionPago?
  itemsConocimiento            NegocioConocimientoItem[]
  etiquetas                    NegocioEtiqueta[]
  NegocioPaquete               NegocioPaquete[]
  NegocioPaqueteCategoria      NegocioPaqueteCategoria[]
  redesSociales                NegocioRedSocial[]
  transaccionesRecibidas       NegocioTransaccion[]
  Notificacion                 Notificacion[]
  ofertas                      Oferta[]
  preguntasSinRespuestaGeneral PreguntaSinRespuestaGeneral[]
}

model PreguntaSinRespuestaGeneral {
  id              String   @id @default(cuid())
  negocioId       String
  conversacionId  String
  preguntaUsuario String
  estado          String   @default("PENDIENTE_REVISION")
  createdAt       DateTime @default(now())
  negocio         Negocio  @relation(fields: [negocioId], references: [id], onDelete: Cascade)

  @@index([negocioId, estado])
}

model HorarioAtencion {
  id         String    @id @default(cuid())
  negocioId  String
  dia        DiaSemana
  horaInicio String
  horaFin    String
  negocio    Negocio   @relation(fields: [negocioId], references: [id], onDelete: Cascade)

  @@unique([negocioId, dia])
  @@index([negocioId])
}

model ExcepcionHorario {
  id               String   @id @default(cuid())
  negocioId        String
  fecha            DateTime
  esDiaNoLaborable Boolean
  horaInicio       String?
  horaFin          String?
  descripcion      String?
  negocio          Negocio  @relation(fields: [negocioId], references: [id], onDelete: Cascade)

  @@unique([negocioId, fecha])
  @@index([negocioId])
  @@index([fecha])
}

model NegocioRedSocial {
  id        String   @id @default(cuid())
  negocioId String
  nombreRed String
  url       String
  icono     String?
  orden     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  negocio   Negocio  @relation(fields: [negocioId], references: [id], onDelete: Cascade)

  @@unique([negocioId, nombreRed])
  @@index([negocioId])
}

model NegocioConocimientoItem {
  id                      String                 @id @default(cuid())
  negocioId               String
  preguntaOriginalUsuario String?
  preguntaFormulada       String
  respuesta               String?
  estado                  String                 @default("PENDIENTE_RESPUESTA")
  categoria               String?
  fechaRespuesta          DateTime?
  creadoPorTipo           String?
  creadoPorId             String?
  respondidoPorAgenteId   String?
  contadorConsultas       Int                    @default(0)
  ultimaConsulta          DateTime?
  notasInternas           String?
  embeddingPregunta       Unsupported("vector")?
  embeddingRespuesta      Unsupported("vector")?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  accionDeSeguimiento     Json?
  negocio                 Negocio                @relation(fields: [negocioId], references: [id], onDelete: Cascade)

  @@index([negocioId, estado])
  @@index([negocioId, categoria])
}

model NegocioConfiguracionPago {
  id                              String   @id @default(cuid())
  negocioId                       String   @unique
  aceptaPagosOnline               Boolean  @default(false)
  stripeCuentaConectada           Boolean  @default(false)
  plataformaProcesaConSuStripe    Boolean  @default(true)
  aceptaTarjetasCreditoDebito     Boolean  @default(true)
  aceptaMesesSinIntereses         Boolean  @default(false)
  aceptaOxxoPay                   Boolean  @default(false)
  aceptaTransferenciaBancaria     Boolean  @default(false)
  datosBancariosParaTransferencia String?
  monedaPrincipal                 String   @default("MXN")
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt
  stripeAccountId                 String?  @unique
  stripeAccountType               String?
  stripeChargesEnabled            Boolean  @default(false)
  stripeOnboardingComplete        Boolean  @default(false)
  stripePayoutsEnabled            Boolean  @default(false)
  mesesPermitidosMSI              Int[]    @default([])
  negocio                         Negocio  @relation(fields: [negocioId], references: [id], onDelete: Cascade)
}

model NegocioTransaccion {
  id                     String            @id @default(cuid())
  negocioId              String
  fechaTransaccion       DateTime          @default(now())
  concepto               String
  montoBruto             Float
  moneda                 String
  comisionProcesadorPago Float             @default(0)
  comisionPlataforma     Float             @default(0)
  montoNetoRecibido      Float
  metodoPagoUtilizado    String
  referenciaProcesador   String?           @unique
  emailComprador         String?
  nombreComprador        String?
  estado                 EstadoTransaccion @default(PENDIENTE)
  origenPagoId           String?
  origenPagoTipo         String?
  metadata               Json?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  negocio                Negocio           @relation(fields: [negocioId], references: [id])

  @@index([negocioId, fechaTransaccion])
  @@index([negocioId, estado])
  @@index([referenciaProcesador])
}

model NegocioCategoria {
  id           String         @id @default(cuid())
  negocioId    String
  nombre       String
  descripcion  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  orden        Int?
  status       String         @default("activo")
  ItemCatalogo ItemCatalogo[]
  negocio      Negocio        @relation(fields: [negocioId], references: [id], onDelete: Cascade)
}

model NegocioEtiqueta {
  id            String                 @id @default(cuid())
  negocioId     String
  nombre        String
  descripcion   String?
  status        String                 @default("activo")
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  orden         Int?
  itemEtiquetas ItemCatalogoEtiqueta[]
  negocio       Negocio                @relation(fields: [negocioId], references: [id], onDelete: Cascade)
}

model GaleriaNegocio {
  id          String                 @id @default(cuid())
  negocioId   String
  nombre      String
  descripcion String?
  orden       Int?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  status      String                 @default("activo")
  negocio     Negocio                @relation(fields: [negocioId], references: [id], onDelete: Cascade)
  imagenes    ImagenGaleriaNegocio[]

  @@unique([negocioId, nombre])
  @@index([negocioId])
}

model ImagenGaleriaNegocio {
  id               String         @id @default(cuid())
  galeriaNegocioId String
  imageUrl         String
  altText          String?
  descripcion      String?
  orden            Int?
  tamañoBytes     Int?
  createdAt        DateTime       @default(now())
  galeriaNegocio   GaleriaNegocio @relation(fields: [galeriaNegocioId], references: [id], onDelete: Cascade)

  @@index([galeriaNegocioId])
}

model NegocioPaquete {
  id                        String                   @id @default(cuid())
  negocioId                 String
  nombre                    String
  descripcion               String?
  precio                    Float
  orden                     Int?
  status                    String                   @default("activo")
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  negocioPaqueteCategoriaId String?
  descripcionCorta          String?
  linkPago                  String?
  negocio                   Negocio                  @relation(fields: [negocioId], references: [id], onDelete: Cascade)
  negocioPaqueteCategoria   NegocioPaqueteCategoria? @relation(fields: [negocioPaqueteCategoriaId], references: [id])
  galeria                   NegocioPaqueteGaleria[]
  items                     NegocioPaqueteItem[]
  videos                    NegocioPaqueteVideos[]

  @@index([negocioId])
}

model NegocioPaqueteCategoria {
  id             String           @id @default(cuid())
  nombre         String
  orden          Int?
  status         String           @default("activo")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  negocioId      String
  NegocioPaquete NegocioPaquete[]
  negocio        Negocio          @relation(fields: [negocioId], references: [id], onDelete: Cascade)
}

model NegocioPaqueteItem {
  id               String         @id @default(cuid())
  negocioPaqueteId String
  itemCatalogoId   String
  itemCatalogo     ItemCatalogo   @relation(fields: [itemCatalogoId], references: [id])
  negocioPaquete   NegocioPaquete @relation(fields: [negocioPaqueteId], references: [id], onDelete: Cascade)

  @@index([negocioPaqueteId])
}

model NegocioPaqueteGaleria {
  id               String         @id @default(cuid())
  negocioPaqueteId String
  imageUrl         String
  altText          String?
  descripcion      String?
  orden            Int?
  tamañoBytes     Int?
  createdAt        DateTime       @default(now())
  negocioPaquete   NegocioPaquete @relation(fields: [negocioPaqueteId], references: [id], onDelete: Cascade)

  @@index([negocioPaqueteId])
}

model NegocioPaqueteVideos {
  id               String         @id @default(cuid())
  negocioPaqueteId String
  videoUrl         String
  tipoVideo        String?
  titulo           String?
  descripcion      String?
  orden            Int?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  tamañoBytes     Int?
  negocioPaquete   NegocioPaquete @relation(fields: [negocioPaqueteId], references: [id], onDelete: Cascade)

  @@index([negocioPaqueteId])
}

model Oferta {
  id                             String                       @id @default(cuid())
  negocioId                      String
  nombre                         String
  descripcion                    String?
  fechaInicio                    DateTime
  fechaFin                       DateTime
  createdAt                      DateTime                     @default(now())
  updatedAt                      DateTime                     @updatedAt
  intervaloRecurrencia           IntervaloRecurrenciaOferta?
  precio                         Float?
  tipoPago                       TipoPagoOferta?              @default(UNICO)
  objetivos                      ObjetivoOferta[]
  anticipo                       Float?
  porcentajeAnticipo             Float?
  tipoAnticipo                   TipoAnticipoOferta?
  objetivoCitaDuracionMinutos    Int?
  objetivoCitaFecha              DateTime?
  objetivoCitaLimiteConcurrencia Int?
  objetivoCitaTipo               ObjetivoCitaTipoEnum?
  objetivoCitaUbicacion          String?
  status                         EstadoOferta                 @default(BORRADOR)
  direccionUbicacion             String?
  googleMapsUrl                  String?
  embedding                      Unsupported("vector")?
  ItemCatalogoOferta             ItemCatalogoOferta[]
  negocio                        Negocio                      @relation(fields: [negocioId], references: [id], onDelete: Cascade)
  detallesAdicionales            OfertaDetalle[]
  documentosOferta               OfertaDocumento[]
  OfertaGaleria                  OfertaGaleria[]
  serviciosDeCita                OfertaServicioCita[]
  videos                         OfertaVideos[]
  PreguntaSinRespuestaOferta     PreguntaSinRespuestaOferta[]

  @@index([negocioId, status, fechaFin])
}

model ItemCatalogoOferta {
  id             String       @id @default(cuid())
  itemCatalogoId String
  ofertaId       String
  itemCatalogo   ItemCatalogo @relation(fields: [itemCatalogoId], references: [id], onDelete: Cascade)
  oferta         Oferta       @relation(fields: [ofertaId], references: [id], onDelete: Cascade)

  @@unique([itemCatalogoId, ofertaId])
  @@index([itemCatalogoId])
  @@index([ofertaId])
}

model OfertaGaleria {
  id           String   @id @default(cuid())
  ofertaId     String
  imageUrl     String
  altText      String?
  descripcion  String?
  orden        Int?
  tamañoBytes Int?
  createdAt    DateTime @default(now())
  oferta       Oferta   @relation(fields: [ofertaId], references: [id], onDelete: Cascade)

  @@index([ofertaId])
}

model OfertaVideos {
  id           String   @id @default(cuid())
  ofertaId     String
  videoUrl     String
  tipoVideo    String?
  titulo       String?
  descripcion  String?
  orden        Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tamañoBytes Int?
  oferta       Oferta   @relation(fields: [ofertaId], references: [id], onDelete: Cascade)

  @@index([ofertaId])
}

model OfertaDocumento {
  id                   String   @id @default(cuid())
  ofertaId             String
  documentoUrl         String
  documentoNombre      String?
  documentoTipo        String?
  documentoTamanoBytes Int?
  descripcion          String?
  orden                Int?
  createdAt            DateTime @default(now())
  oferta               Oferta   @relation(fields: [ofertaId], references: [id], onDelete: Cascade)

  @@index([ofertaId])
}

model OfertaDetalle {
  id                         String                      @id @default(cuid())
  ofertaId                   String
  tituloDetalle              String
  contenido                  String
  tipoDetalle                String?
  palabrasClave              String[]
  orden                      Int?
  estadoContenido            String                      @default("PUBLICADO")
  preguntaOriginalUsuario    String?
  creadoPorHumano            Boolean                     @default(true)
  notificacionEnviada        Boolean                     @default(false)
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  embedding                  Unsupported("vector")?
  oferta                     Oferta                      @relation(fields: [ofertaId], references: [id], onDelete: Cascade)
  documentosDetalle          OfertaDetalleDocumento[]
  galeriaDetalle             OfertaDetalleGaleria[]
  videoDetalle               OfertaDetalleVideo?
  PreguntaSinRespuestaOferta PreguntaSinRespuestaOferta?

  @@index([ofertaId, tipoDetalle])
  @@index([ofertaId, estadoContenido])
}

model OfertaDetalleGaleria {
  id              String        @id @default(cuid())
  ofertaDetalleId String
  imageUrl        String
  altText         String?
  descripcion     String?
  orden           Int?
  createdAt       DateTime      @default(now())
  tamañoBytes    Int?
  ofertaDetalle   OfertaDetalle @relation(fields: [ofertaDetalleId], references: [id], onDelete: Cascade)
}

model OfertaDetalleVideo {
  id              String        @id @default(cuid())
  ofertaDetalleId String        @unique
  videoUrl        String
  tipoVideo       String?
  createdAt       DateTime      @default(now())
  tamañoBytes    Int?
  descripcion     String?
  orden           Int?
  titulo          String?
  updatedAt       DateTime      @updatedAt
  ofertaDetalle   OfertaDetalle @relation(fields: [ofertaDetalleId], references: [id], onDelete: Cascade)
}

model OfertaDetalleDocumento {
  id                   String        @id @default(cuid())
  ofertaDetalleId      String
  documentoUrl         String
  documentoNombre      String?
  documentoTipo        String?
  documentoTamanoBytes Int?
  descripcion          String?
  orden                Int?
  createdAt            DateTime      @default(now())
  ofertaDetalle        OfertaDetalle @relation(fields: [ofertaDetalleId], references: [id], onDelete: Cascade)

  @@index([ofertaDetalleId])
}

model PreguntaSinRespuestaOferta {
  id                       String         @id @default(cuid())
  ofertaId                 String
  conversacionId           String
  preguntaUsuario          String
  estado                   String         @default("PENDIENTE_REVISION")
  asignadoAId              String?
  ofertaDetalleRespuestaId String?        @unique
  fechaCreacion            DateTime       @default(now())
  fechaRespuesta           DateTime?
  fechaNotificacionUsuario DateTime?
  ofertaDetalleRespuesta   OfertaDetalle? @relation(fields: [ofertaDetalleRespuestaId], references: [id])
  oferta                   Oferta         @relation(fields: [ofertaId], references: [id], onDelete: Cascade)

  @@index([ofertaId, estado])
  @@index([asignadoAId])
}

model Catalogo {
  id                        String            @id @default(cuid())
  negocioId                 String
  descripcion               String?
  status                    String            @default("activo")
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt
  nombre                    String
  imagenPortadaUrl          String?
  imagenPortadaTamañoBytes Int?
  negocio                   Negocio           @relation(fields: [negocioId], references: [id], onDelete: Cascade)
  CatalogoGaleria           CatalogoGaleria[]
  ItemCatalogo              ItemCatalogo[]
}

model CatalogoGaleria {
  id           String   @id @default(cuid())
  catalogoId   String
  imageUrl     String
  altText      String?
  descripcion  String?
  orden        Int?
  tamañoBytes Int?
  createdAt    DateTime @default(now())
  catalogo     Catalogo @relation(fields: [catalogoId], references: [id], onDelete: Cascade)

  @@index([catalogoId])
}

model ItemCatalogo {
  id                  String                 @id @default(cuid())
  catalogoId          String
  nombre              String
  descripcion         String?
  precio              Float
  linkPago            String?
  funcionPrincipal    String?
  AquienVaDirigido    String?
  status              String                 @default("activo")
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  categoriaId         String?
  orden               Int?
  negocioId           String?
  esPromocionado      Boolean                @default(false)
  palabrasClave       String?
  sku                 String?                @unique
  stock               Int?
  stockMinimo         Int?
  tipoItem            String?                @default("PRODUCTO")
  unidadMedida        String?
  videoUrl            String?
  variantesNombre     String[]
  catalogo            Catalogo               @relation(fields: [catalogoId], references: [id], onDelete: Cascade)
  categoria           NegocioCategoria?      @relation(fields: [categoriaId], references: [id])
  negocio             Negocio?               @relation(fields: [negocioId], references: [id], onDelete: Cascade)
  itemEtiquetas       ItemCatalogoEtiqueta[]
  galeria             ItemCatalogoGaleria[]
  itemCatalogoOfertas ItemCatalogoOferta[]
  videos              ItemCatalogoVideos[]
  interacciones       ItemInteraccion[]
  negocioPaqueteItems NegocioPaqueteItem[]

  @@index([catalogoId])
  @@index([categoriaId])
  @@index([negocioId])
  @@index([status])
  @@index([esPromocionado])
}

model ItemInteraccion {
  id              String            @id @default(cuid())
  itemCatalogoId  String
  tipoInteraccion String
  timestamp       DateTime          @default(now())
  asistenteId     String?
  conversacionId  String?
  metadata        Json?
  asistente       AsistenteVirtual? @relation(fields: [asistenteId], references: [id])
  conversacion    Conversacion?     @relation(fields: [conversacionId], references: [id])
  itemCatalogo    ItemCatalogo      @relation(fields: [itemCatalogoId], references: [id], onDelete: Cascade)

  @@index([itemCatalogoId, timestamp])
  @@index([tipoInteraccion])
  @@index([asistenteId])
  @@index([conversacionId])
}

model ItemCatalogoGaleria {
  id             String       @id @default(cuid())
  itemCatalogoId String
  imageUrl       String
  altText        String?
  descripcion    String?
  orden          Int?
  tamañoBytes   Int?
  createdAt      DateTime     @default(now())
  itemCatalogo   ItemCatalogo @relation(fields: [itemCatalogoId], references: [id], onDelete: Cascade)

  @@index([itemCatalogoId])
}

model ItemCatalogoVideos {
  id             String       @id @default(cuid())
  itemCatalogoId String
  videoUrl       String
  tipoVideo      String?
  titulo         String?
  descripcion    String?
  orden          Int?
  tamañoBytes   Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  itemCatalogo   ItemCatalogo @relation(fields: [itemCatalogoId], references: [id], onDelete: Cascade)
}

model ItemCatalogoEtiqueta {
  id             String          @id @default(cuid())
  itemCatalogoId String
  etiquetaId     String
  etiqueta       NegocioEtiqueta @relation(fields: [etiquetaId], references: [id], onDelete: Cascade)
  itemCatalogo   ItemCatalogo    @relation(fields: [itemCatalogoId], references: [id], onDelete: Cascade)

  @@unique([itemCatalogoId, etiquetaId])
}

model CRM {
  id                 String                  @id @default(cuid())
  negocioId          String                  @unique
  status             String                  @default("activo")
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  Agente             Agente[]
  negocio            Negocio                 @relation(fields: [negocioId], references: [id], onDelete: Cascade)
  CampoPersonalizado CRMCampoPersonalizado[]
  Canal              CanalCRM[]
  Etiqueta           EtiquetaCRM[]
  Lead               Lead[]
  Pipeline           PipelineCRM[]
}

model CRMCampoPersonalizado {
  id                   String                    @id @default(cuid())
  crmId                String
  nombre               String
  tipo                 String
  requerido            Boolean                   @default(false)
  orden                Int?
  status               String                    @default("activo")
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  nombreCampo          String?
  descripcionParaIA    String?
  metadata             Json?
  crm                  CRM                       @relation(fields: [crmId], references: [id], onDelete: Cascade)
  tareasQueLoRequieren TareaCampoPersonalizado[]

  @@unique([crmId, nombre])
  @@index([crmId])
}

model CanalCRM {
  id        String   @id @default(cuid())
  crmId     String
  orden     Int?
  nombre    String
  status    String   @default("activo")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  crm       CRM      @relation(fields: [crmId], references: [id])
  Lead      Lead[]

  @@unique([crmId, nombre])
}

model PipelineCRM {
  id        String   @id @default(cuid())
  crmId     String
  orden     Int?
  nombre    String
  status    String   @default("activo")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Lead      Lead[]
  crm       CRM      @relation(fields: [crmId], references: [id])

  @@unique([crmId, nombre])
}

model EtiquetaCRM {
  id        String         @id @default(cuid())
  crmId     String
  orden     Int?
  nombre    String
  color     String?
  status    String         @default("activo")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  crm       CRM            @relation(fields: [crmId], references: [id], onDelete: Cascade)
  Leads     LeadEtiqueta[]

  @@unique([crmId, nombre])
}

model Lead {
  id            String         @id @default(cuid())
  crmId         String?
  agenteId      String?
  canalId       String?
  nombre        String
  email         String? @unique
  telefono      String?
  jsonParams    Json?
  status        String         @default("nuevo")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  pipelineId    String?
  valorEstimado Float?
  Agenda        Agenda[]
  Bitacora      Bitacora[]
  Conversacion  Conversacion[]
  agente        Agente?        @relation(fields: [agenteId], references: [id])
  Canal         CanalCRM?      @relation(fields: [canalId], references: [id])
  crm           CRM?           @relation(fields: [crmId], references: [id], onDelete: Cascade)
  Pipeline      PipelineCRM?   @relation(fields: [pipelineId], references: [id])
  Etiquetas     LeadEtiqueta[]

  @@index([crmId])
  @@index([agenteId])
  @@index([canalId])
  @@index([pipelineId])
  @@index([email])
  @@index([telefono])
}

model LeadEtiqueta {
  leadId     String
  etiquetaId String
  asignadoEn DateTime    @default(now())
  etiqueta   EtiquetaCRM @relation(fields: [etiquetaId], references: [id], onDelete: Cascade)
  lead       Lead        @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@id([leadId, etiquetaId])
  @@index([leadId])
  @@index([etiquetaId])
}

model Agente {
  id                      String         @id @default(cuid())
  crmId                   String
  email                   String         @unique
  telefono                String?
  password                String
  status                  String         @default("activo")
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  nombre                  String?
  rol                     String?
  userId                  String?        @unique
  Agenda                  Agenda[]
  crm                     CRM            @relation(fields: [crmId], references: [id], onDelete: Cascade)
  Bitacora                Bitacora[]
  conversacionesAsignadas Conversacion[] @relation("ConversacionesAsignadas")
  interaccionesRealizadas Interaccion[]  @relation("InteraccionesPorAgente")
  Lead                    Lead[]
  Notificacion            Notificacion[]
}

model Bitacora {
  id          String   @id @default(cuid())
  agenteId    String?
  leadId      String
  descripcion String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  metadata    Json?
  tipoAccion  String
  agente      Agente?  @relation(fields: [agenteId], references: [id])
  lead        Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@index([agenteId])
}

model Agenda {
  id                 String            @id @default(cuid())
  agenteId           String?
  leadId             String
  fecha              DateTime
  asunto             String
  descripcion        String?
  status             String            @default("pendiente")
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  tipo               String
  asistenteId        String?
  tipoDeCitaId       String?
  negocioId          String?
  modalidad          String?
  googleMapsUrl      String?
  linkReunionVirtual String?
  agente             Agente?           @relation(fields: [agenteId], references: [id], onDelete: Cascade)
  asistente          AsistenteVirtual? @relation(fields: [asistenteId], references: [id])
  lead               Lead              @relation(fields: [leadId], references: [id], onDelete: Cascade)
  negocio            Negocio?          @relation(fields: [negocioId], references: [id], onDelete: Cascade)
  tipoDeCita         AgendaTipoCita?   @relation(fields: [tipoDeCitaId], references: [id])
  historial          AgendaHistorial[]

  @@index([negocioId])
  @@index([leadId])
  @@index([agenteId])
  @@index([fecha])
}

model AgendaConfiguracion {
  id                       String               @id @default(cuid())
  negocioId                String               @unique
  aceptaCitasPresenciales  Boolean              @default(false)
  aceptaCitasVirtuales     Boolean              @default(false)
  requiereTelefonoParaCita Boolean              @default(false)
  requiereEmailParaCita    Boolean              @default(false)
  requiereNombreParaCita   Boolean              @default(true)
  bufferMinutos            Int?
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  metodosPagoTexto         String?
  recomendacionesParaCita  String?
  recordatorioMinutosAntes Int?                 @default(1440)
  negocio                  Negocio              @relation(fields: [negocioId], references: [id], onDelete: Cascade)
  agendaRecordatorios      agendaRecordatorio[]
}

model AgendaTipoCita {
  id                   String               @id @default(cuid())
  nombre               String
  descripcion          String?
  duracionMinutos      Int?
  esVirtual            Boolean              @default(false)
  esPresencial         Boolean              @default(false)
  negocioId            String
  orden                Int?
  limiteConcurrencia   Int                  @default(1)
  activo               Boolean              @default(true)
  todoElDia            Boolean?             @default(false)
  agendas              Agenda[]
  negocio              Negocio              @relation(fields: [negocioId], references: [id], onDelete: Cascade)
  ofertasQueLoIncluyen OfertaServicioCita[]

  @@unique([negocioId, nombre])
  @@index([negocioId])
}

model OfertaServicioCita {
  ofertaId         String
  agendaTipoCitaId String
  agendaTipoCita   AgendaTipoCita @relation(fields: [agendaTipoCitaId], references: [id], onDelete: Cascade)
  oferta           Oferta         @relation(fields: [ofertaId], references: [id], onDelete: Cascade)

  @@id([ofertaId, agendaTipoCitaId])
}

model AgendaHistorial {
  id            String   @id @default(cuid())
  agendaId      String
  actionType    String
  changedByType String?
  changedById   String?
  createdAt     DateTime @default(now())
  reason        String?
  agenda        Agenda   @relation(fields: [agendaId], references: [id], onDelete: Cascade)

  @@index([agendaId])
}

model agendaRecordatorio {
  id                    String              @id @default(cuid())
  agendaConfiguracionId String
  minutosAntes          Int
  mensaje               String
  activo                Boolean             @default(true)
  agendaConfiguracion   AgendaConfiguracion @relation(fields: [agendaConfiguracionId], references: [id])

  @@index([agendaConfiguracionId])
}

model TareaEnProgreso {
  id             String                    @id @default(cuid())
  conversacionId String                    @unique
  nombreTarea    String
  contexto       Json
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  estado         EstadoTareaConversacional @default(INICIADA)
  mensajeError   String?
  conversacion   Conversacion              @relation(fields: [conversacionId], references: [id], onDelete: Cascade)

  @@index([conversacionId, estado])
}

model Conversacion {
  id                 String            @id @default(cuid())
  whatsappId         String?           @unique
  phoneNumberId      String?
  status             String            @default("abierta")
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  intencion          String?
  interes            String?
  asistenteVirtualId String?
  leadId             String?
  agenteCrmActualId  String?
  agenteCrmActual    Agente?           @relation("ConversacionesAsignadas", fields: [agenteCrmActualId], references: [id])
  asistenteVirtual   AsistenteVirtual? @relation(fields: [asistenteVirtualId], references: [id])
  lead               Lead?             @relation(fields: [leadId], references: [id])
  Interaccion        Interaccion[]
  itemInteracciones  ItemInteraccion[]
  tareaEnProgreso    TareaEnProgreso?

  @@index([leadId])
  @@index([asistenteVirtualId])
  @@index([status])
  @@index([updatedAt])
  @@index([agenteCrmActualId])
}

model Interaccion {
  id                     String               @id @default(cuid())
  conversacionId         String
  messageId              String?
  role                   String
  intencion              String?
  entidad                String?
  interes                String?
  sentimiento            String?
  mediaType              String?
  createdAt              DateTime             @default(now())
  mediaUrl               String?
  agenteCrmId            String?
  functionCallArgs       Json?
  functionCallNombre     String?
  functionResponseData   Json?
  mensajeTexto           String?
  parteTipo              InteraccionParteTipo @default(TEXT)
  functionResponseNombre String?
  uiComponentPayload     Json?
  canalInteraccion       String?
  agenteCrm              Agente?              @relation("InteraccionesPorAgente", fields: [agenteCrmId], references: [id])
  conversacion           Conversacion         @relation(fields: [conversacionId], references: [id], onDelete: Cascade)

  @@index([conversacionId, createdAt], map: "Interaccion_conversacionId_createdAt_unique_idx")
  @@index([agenteCrmId])
}

model Notificacion {
  id         String    @id @default(cuid())
  clienteId  String
  negocioId  String?
  tipo       String
  mensaje    String
  leida      Boolean   @default(false)
  fechaLeida DateTime?
  urlDestino String?
  createdAt  DateTime  @default(now())
  agenteId   String?
  agente     Agente?   @relation(fields: [agenteId], references: [id], onDelete: Cascade)
  cliente    Cliente   @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  negocio    Negocio?  @relation(fields: [negocioId], references: [id], onDelete: Cascade)

  @@index([clienteId, leida])
  @@index([negocioId])
}

enum DiaSemana {
  LUNES
  MARTES
  MIERCOLES
  JUEVES
  VIERNES
  SABADO
  DOMINGO
}

enum EstadoTransaccion {
  PENDIENTE
  COMPLETADA
  FALLIDA
  REEMBOLSADA
  PARCIALMENTE_REEMBOLSADA
  EN_PROCESO
  CANCELADA
}

enum TipoPagoOferta {
  UNICO
  RECURRENTE
}

enum IntervaloRecurrenciaOferta {
  SEMANAL
  QUINCENAL
  MENSUAL
  BIMESTRAL
  TRIMESTRAL
  SEMESTRAL
  ANUAL
}

enum ObjetivoOferta {
  CITA
  VENTA
}

enum TipoAnticipoOferta {
  PORCENTAJE
  MONTO_FIJO
}

enum ObjetivoCitaTipoEnum {
  POR_HORA
  DIA_ESPECIFICO
}

enum EstadoOferta {
  ACTIVO
  INACTIVO
  BORRADOR
  PROGRAMADA
  FINALIZADA
  BETA
  PROXIMAMENTE
}

enum StatusAgenda {
  PENDIENTE
  COMPLETADA
  CANCELADA
  REAGENDADA
  NO_ASISTIO
}

enum ActionType {
  CREATED
  UPDATED
  CANCELED
  RESCHEDULED
}

enum ChangedByType {
  AGENT
  ASSISTANT
  USER
  SYSTEM
}

enum EstadoTareaConversacional {
  INICIADA
  RECOLECTANDO_DATOS
  PENDIENTE_CONFIRMACION_USUARIO
  EJECUTANDO_ACCION_FINAL
  COMPLETADA
  FALLIDA
  CANCELADA_POR_USUARIO
  VALIDANDO_DISPONIBILIDAD
  RECOLECTANDO_NUEVA_FECHA
  RECOLECTANDO_NUEVA_HORA
  PENDIENTE_CONFIRMACION_FECHA_AMBIGUA
  ESPERANDO_EMAIL
  ESPERANDO_CORRECCION
  VALIDANDO_FECHA_HORA
  RECOLECTANDO_DATOS_ADICIONALES
  ESPERANDO_SERVICIO
  ESPERANDO_CAMPO_PERSONALIZADO
  ANALIZANDO_CORRECCION
  ESPERANDO_SELECCION_USUARIO
  ESPERANDO_NUEVA_FECHA
  CONFIRMANDO_CITA_ORIGINAL
}

enum InteraccionParteTipo {
  TEXT
  FUNCTION_CALL
  FUNCTION_RESPONSE
}
